# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 API Manager Clustered deployment in Development with High Availability
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - IAMRole
          - KeyPairName
          - WSO2InstanceType
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
          - NetworkStackName
      - Label:
          default: Database Configuration
        Parameters:
          - DBUsername
          - DBPassword
          - DBType
      - Label:
          default: Environment Configurations
        Parameters:
          - Environment
    ParameterLabels:
      IAMRole:
        default: AWS IAM Role
      CertificateName:
        default: SSL Certificate Name
      NetworkStackName:
        default: Network Stack Name
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: Username
      DBPassword:
        default: Password
      WSO2InstanceType:
        default: Instance Type
      AMIid:
        default: AMI ID
      Product:
        default: Product
      Version:
        default: Version
      Environment:
        default: Environment
Resources:
  WSO2APIMDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2DBSecurityGroup"
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: !Join
        - ''
        - - 'WSO2APIMDB'
          - !Ref Environment
          - 'Instance'
      DBName: WSO2_DB
      Engine: !Ref DBType
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref WSO2APIMDBSubnetGroup
  WSO2APIMDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2PrivateSubnet1"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2PrivateSubnet2"
  # File system configurations
  WSO2APIMEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  WSO2APIMPrivateSubnet1EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-WSO2PrivateSubnet1"
      FileSystemId: !Ref WSO2APIMEFSFileSystem
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2EFSSecurityGroup"
  WSO2APIMPrivateSubnet2EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-WSO2PrivateSubnet2"
      FileSystemId: !Ref WSO2APIMEFSFileSystem
      SecurityGroups:
        - Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-WSO2EFSSecurityGroup"
  # Product configurations
  WSO2APIMBastionInstance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref AMIid
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'WSO2APIMBastion'
              - !Ref Environment
              - 'Instance'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          AssociatePublicIpAddress : 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-WSO2PublicSubnet1"
          GroupSet:
            - Fn::ImportValue:
                !Sub "${NetworkStackName}-WSO2BastionSecurityGroup"
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          apt-get update
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          export DB_HOSTNAME=${WSO2APIMDBInstance.Endpoint.Address}
          export DB_PORT=${WSO2APIMDBInstance.Endpoint.Port}
          export DB_USERNAME=${DBUsername}
          export DB_PASSWORD=${DBPassword}
          rm -rf /home/wso2user/endpointCars
          rm -rf /home/wso2user/${Product}-${Version}.zip
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /usr/local/bin/bashScripts/MySQL/provision_db_scripts.sh
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /usr/local/bin/bashScripts/MySQL/provision_db_scripts.sh
          sed -i "s/CF_DB_HOST/${WSO2APIMDBInstance.Endpoint.Address}/g" /usr/local/bin/bashScripts/MySQL/provision_db_scripts.sh
          sed -i "s/CF_DB_PORT/${WSO2APIMDBInstance.Endpoint.Port}/g" /usr/local/bin/bashScripts/MySQL/provision_db_scripts.sh
          bash /usr/local/bin/bashScripts/MySQL/provision_db_scripts.sh 2>&1 | tee /home/wso2user/db_log.txt
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMBastionInstance --region ${AWS::Region}
  WSO2APIMNode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref AMIid
      InstanceType: !Ref WSO2InstanceType
      InstanceMonitoring: 'false'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2ProductSecurityGroup"
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          apt-get update >> /home/wso2user/install.log
          apt install -y nfs-common >> /home/wso2user/install.log
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          unzip /home/wso2user/${Product}-${Version}.zip -d /home/wso2user/
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/wso2user/${Product}-${Version}/repository/conf/axis2/axis2.xml
          sed -i "s/ALB_DNS_NAME/${WSO2APIMLoadBalancer.DNSName}/g" /home/wso2user/${Product}-${Version}/repository/conf/carbon.xml
          sed -i "s/ALB_DNS_NAME/${WSO2APIMLoadBalancer.DNSName}/g" /home/wso2user/${Product}-${Version}/repository/deployment/server/jaggeryapps/store/site/conf/site.json
          sed -i "s/ALB_DNS_NAME/${WSO2APIMLoadBalancer.DNSName}/g" /home/wso2user/${Product}-${Version}/repository/conf/api-manager.xml
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /home/wso2user/${Product}-${Version}/repository/conf/datasources/master-datasources.xml
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /home/wso2user/${Product}-${Version}/repository/conf/datasources/master-datasources.xml
          sed -i "s/RDS_DNS_NAME/${WSO2APIMDBInstance.Endpoint.Address}/g" /home/wso2user/${Product}-${Version}/repository/conf/datasources/master-datasources.xml
          tar -xvf /opt/OpenJDK8U-jdk_8u222_linux_x64.tar.gz -C /opt/
          export PRIVATE_IP=$(ifconfig | grep -m 1 'inet ' | awk '{print $2}')
          export LogserverIP=${WSO2APIMLoggingInstance.PrivateIp}
          echo "$LogserverIP logserver" >> /etc/hosts
          sed -i "s/LOCAL-MEMBER-HOST/$PRIVATE_IP/g" /home/wso2user/${Product}-${Version}/repository/conf/axis2/axis2.xml
          sed -i "s/WSO2SecurityGroup/$SECURITYGROUP/g" /home/wso2user/${Product}-${Version}/repository/conf/axis2/axis2.xml
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2APIMEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 100
          if [ ! -d "/mnt/efs/server" ]; then
              mkdir -p /mnt/efs/server
              cp -r /home/wso2user/${Product}-${Version}/repository/deployment/server /mnt/efs
          fi
          rm -rf  /home/wso2user/${Product}-${Version}/repository/deployment/server
          ln -s /mnt/efs/server /home/wso2user/${Product}-${Version}/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /home/wso2user/${Product}-${Version}/repository/tenants /mnt/efs
          fi
          rm -rf /home/wso2user/${Product}-${Version}/repository/tenants
          ln -s /mnt/efs/tenants /home/wso2user/${Product}-${Version}/repository/tenants
          echo "${WSO2APIMEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /home/wso2user/${Product}-${Version}/bin/wso2server.sh start
          sleep 30
          end=$((SECONDS+1200))
          while [ $SECONDS -lt $end ] ; do
              sleep 10
              wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
              if [ $? -eq "0" ] ; then
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode1AutoScalingGroup --region ${AWS::Region}
                break
              fi
          done
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMLoadBalancer
      - WSO2APIMDBInstance
      - WSO2APIMBastionInstance
      - WSO2APIMLoggingInstance
  WSO2APIMNode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2APIMNode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref WSO2APIMALB9443TargetGroup
        - !Ref WSO2APIMALB8243TargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2PrivateSubnet1"
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'WSO2APIM'
              - !Ref Environment
              - 'Instance01'
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: apim
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT30M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMLoadBalancer
  WSO2APIMNode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref AMIid
      InstanceType: !Ref WSO2InstanceType
      InstanceMonitoring: 'false'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2ProductSecurityGroup"
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          apt-get update >> /home/wso2user/install.log
          apt install -y nfs-common >> /home/wso2user/install.log
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          unzip /home/wso2user/${Product}-${Version}.zip -d /home/wso2user/
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/wso2user/${Product}-${Version}/repository/conf/axis2/axis2.xml
          sed -i "s/ALB_DNS_NAME/${WSO2APIMLoadBalancer.DNSName}/g" /home/wso2user/${Product}-${Version}/repository/conf/carbon.xml
          sed -i "s/ALB_DNS_NAME/${WSO2APIMLoadBalancer.DNSName}/g" /home/wso2user/${Product}-${Version}/repository/deployment/server/jaggeryapps/store/site/conf/site.json
          sed -i "s/ALB_DNS_NAME/${WSO2APIMLoadBalancer.DNSName}/g" /home/wso2user/${Product}-${Version}/repository/conf/api-manager.xml
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /home/wso2user/${Product}-${Version}/repository/conf/datasources/master-datasources.xml
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /home/wso2user/${Product}-${Version}/repository/conf/datasources/master-datasources.xml
          sed -i "s/RDS_DNS_NAME/${WSO2APIMDBInstance.Endpoint.Address}/g" /home/wso2user/${Product}-${Version}/repository/conf/datasources/master-datasources.xml
          tar -xvf /opt/OpenJDK8U-jdk_8u222_linux_x64.tar.gz -C /opt/
          export PRIVATE_IP=$(ifconfig | grep -m 1 'inet ' | awk '{print $2}')
          export LogserverIP=${WSO2APIMLoggingInstance.PrivateIp}
          echo "$LogserverIP logserver" >> /etc/hosts
          sed -i "s/LOCAL-MEMBER-HOST/$PRIVATE_IP/g" /home/wso2user/${Product}-${Version}/repository/conf/axis2/axis2.xml
          sed -i "s/WSO2SecurityGroup/$SECURITYGROUP/g" /home/wso2user/${Product}-${Version}/repository/conf/axis2/axis2.xml
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2APIMEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 450
          if [ ! -d "/mnt/efs/server" ]; then
              mkdir -p /mnt/efs/server
              cp -r /home/wso2user/${Product}-${Version}/repository/deployment/server /mnt/efs
          fi
          rm -rf  /home/wso2user/${Product}-${Version}/repository/deployment/server
          ln -s /mnt/efs/server /home/wso2user/${Product}-${Version}/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /home/wso2user/${Product}-${Version}/repository/tenants /mnt/efs
          fi
          rm -rf /home/wso2user/${Product}-${Version}/repository/tenants
          ln -s /mnt/efs/tenants /home/wso2user/${Product}-${Version}/repository/tenants
          echo "${WSO2APIMEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /home/wso2user/${Product}-${Version}/bin/wso2server.sh start
          sleep 30
          end=$((SECONDS+1200))
          while [ $SECONDS -lt $end ] ; do
              sleep 10
              wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
              if [ $? -eq "0" ] ; then
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode2AutoScalingGroup --region ${AWS::Region}
                break
              fi
          done
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMLoadBalancer
      - WSO2APIMDBInstance
      - WSO2APIMBastionInstance
      - WSO2APIMLoggingInstance
  WSO2APIMNode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2APIMNode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref WSO2APIMALB9443TargetGroup
        - !Ref WSO2APIMALB8243TargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2PrivateSubnet2"
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'WSO2APIM'
              - !Ref Environment
              - 'Instance02'
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: apim
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT30M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMLoadBalancer
  WSO2APIMLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
        - ''
        - - 'WSO2APIMLoadBalancer'
          - !Ref Environment
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2PublicSubnet1"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2PublicSubnet2"
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-WSO2LoadBalancerSecurityGroup"
  WSO2APIMALB9443TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: !Join
        - '-'
        - - 'apim'
          - 'carbon'
          - !Ref Environment
          - '9443'
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        - Key: stickiness.enabled
          Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-WSO2VPC"
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref Product
  WSO2APIMALB8243TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /services/Version
      HealthCheckPort: 8243
      Matcher:
        HttpCode: 200
      Name: !Join
        - '-'
        - - 'apim'
          - 'carbon'
          - !Ref Environment
          - '8243'
      Port: 8243
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        - Key: stickiness.enabled
          Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-WSO2VPC"
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref Product
  WSO2APIMALB443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALB9443TargetGroup
      Certificates:
        - CertificateArn: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
  WSO2APIMALB8243Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALB8243TargetGroup
      Certificates:
        - CertificateArn: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 8243
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
  WSO2APIMALB9443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALB9443TargetGroup
      Certificates:
        - CertificateArn: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 9443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
  WSO2APIMLoggingInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2LoggingMasterAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: t2.large
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'WSO2APIMLogging'
              - !Ref Environment
              - 'Instance'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          AssociatePublicIpAddress: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-WSO2PublicSubnet1"
          GroupSet:
            - Fn::ImportValue:
                !Sub "${NetworkStackName}-WSO2LoggingSecurityGroup"
      UserData: !Base64
        'Fn::Sub': |
          #cloud-config
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          export REGION=${AWS::Region}
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMLoadBalancer
      - WSO2APIMDBInstance
Outputs:
  ConsoleURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/carbon'
    Description: WSO2 API Manager Management Console URL
  PublisherURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/publisher'
    Description: WSO2 APIM Publisher URL for API development and management
  StoreURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/store'
    Description: WS02 APIM Store Web application URL (Developer Store)
  AdminURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/admin'
    Description: WSO2 APIM Admin service URL
  HttpsURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8243'
    Description: WSO2 APIM HTTPS Gateway endpoint
  HttpURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8280'
    Description: APIM HTTP Gateway endpoint
  LogDashboardURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2APIMLoggingInstance
          - PublicDnsName
        - ':5601'
    Description: Log Dashboard URL (Kibana Dashboard)
  MountTargetIP:
    Value: !GetAtt WSO2APIMPrivateSubnet1EFSMountTarget.IpAddress
Parameters:
  IAMRole:
    Type: String
  KeyPairName:
    Description: The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  NetworkStackName:
    Description: Name of the stack with network resources exported
    Type: String
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  DBUsername:
    Type: String
  DBPassword:
    Type: String
    NoEcho: true
  DBType:
    Type: String
    Default: MySQL
    AllowedValues:
      - MySQL
      - PostgreSQL
      - Oracle
      - SQL Server
  AMIid:
    Type: String
  Product:
    Type: String
  Version:
    Type: String
  Environment:
    Type: String
Mappings:
  WSO2LoggingMasterAMIRegionMap:
    us-east-1:
      Ubuntu1804: ami-089c43fe12d048b25
    us-east-2:
      Ubuntu1804: ami-0b382084a3cc80fb7
    us-west-1:
      Ubuntu1804: ami-0b6d9c2c447ab4299
    us-west-2:
      Ubuntu1804: ami-0897dc385cc87c84a
    ap-south-1:
      Ubuntu1804: ami-092e3cdeac40647ef
    ap-northeast-1:
      Ubuntu1804: ami-0e188a8f0a17f5359
    ap-northeast-2:
      Ubuntu1804: ami-017825b1c521d02c5
    ap-southeast-1:
      Ubuntu1804: ami-0a15b160762a9664b
    ap-southeast-2:
      Ubuntu1804: ami-0b7e0a634a1356911
    ca-central-1:
      Ubuntu1804: ami-0ef8ecec9501bf050
    eu-central-1:
      Ubuntu1804: ami-0521c2773875c9f2e
    eu-west-1:
      Ubuntu1804: ami-0d63a1ebc624058cd
    eu-west-2:
      Ubuntu1804: ami-0e8752d4902c13a57
    eu-west-3:
      Ubuntu1804: ami-0b48a1bd6d96eba46
    eu-north-1:
      Ubuntu1804: ami-05805bdf26a4afe6c
    sa-east-1:
      Ubuntu1804: ami-0393cec4dc744d66d
